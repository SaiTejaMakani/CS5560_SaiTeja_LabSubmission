

import java.io.{BufferedWriter, File, FileWriter}
import java.nio.file.{Files, Paths}

import org.apache.spark.{SparkConf, SparkContext}
import org.apache.commons.io.FileUtils
import java.io.IOException
//**created by sai Teja 6/19/2017

object SparkWordCount {

  def main(args: Array[String]) {

    deleteDirectory();//function to delete scala directory if existed.
    System.setProperty("hadoop.home.dir","E:\\winutils");

    val sparkConf = new SparkConf().setAppName("SparkWordCount").setMaster("local[*]")

    val sc=new SparkContext(sparkConf)

    val input= sc.textFile("E:\\KDM\\bbc\\sport\\011.txt")//scala transform function
    //write rdd transformations here
    println("contains - in each sentence:");
    input.foreach( x => println(x.contains("-")));
    println("first line in input file are::"+input.first());//scala actions
    val inter_input = input.filter(_.contains("-"));//filters "-" charecters
    println("input text file contains:" +inter_input.count() + " lines")//scala action methodes
    //write rdd transformations above
    inter_input.saveAsTextFile("scala_Output")//scala transform function

    val main_nlp: Main_NLP = new Main_NLP//creating an object for java program
    main_nlp.QA_process()//processing QA system.


  }



  @throws[IOException]
  def deleteDirectory(): Unit = {
    try
      FileUtils.deleteDirectory(new File("scala_Output"))
    catch {
      case ioe: IOException =>
        // log the exception here
        ioe.printStackTrace()
        throw ioe
    }
  }

}
========================
java code
========================

import edu.stanford.nlp.ling.CoreAnnotations;
import edu.stanford.nlp.ling.CoreLabel;
import edu.stanford.nlp.pipeline.*;

import edu.stanford.nlp.util.CoreMap;

import java.io.*;
import java.nio.file.*;
import java.util.*;



public class Main_NLP {
    public void QA_process() {
        
        String Question = new String();//question variable
        String Q_part1 = new String();//part 1 mostlly contains "who", "what", "where", "when", "how" and "when" etc.
        String Q_part2 = new String();//Part 2 mostlly contains "is" , "are" and "many" etc.
        String Q_part3 = new String();//Part 3 contains location, people and organization etc.
        String Q_token3 = new String();// As token 3 is not distinguishable we should track exack word.
        String Answer = new String();// Building answer and printing on console.
        Properties props = new Properties();
        Properties props_Q = new Properties();
        props.setProperty("annotators", "tokenize, ssplit, pos, lemma, ner, parse, dcoref");
        StanfordCoreNLP pipeline = new StanfordCoreNLP(props);



        String text = null;
        
        try {

            String content = new String(Files.readAllBytes(Paths.get("E:\\KDM\\Spark WordCount_lab2b\\scala_Output\\part-00000")));
            text = content;
        } catch (IOException e) {
            System.out.println("Exception occured while reading file");
        }

        ArrayList<String> Persons = new ArrayList<String>();
        ArrayList<String> Locations = new ArrayList<String>();
        ArrayList<String> Organizations = new ArrayList<String>();
        Annotation document = new Annotation(text);


        pipeline.annotate(document);

        // these are all the sentences in this document

        List<CoreMap> sentences = document.get(CoreAnnotations.SentencesAnnotation.class);

        for (CoreMap sentence : sentences) {
            
            for (CoreLabel token : sentence.get(CoreAnnotations.TokensAnnotation.class)) {
                
                String ne = token.get(CoreAnnotations.NamedEntityTagAnnotation.class);



                if(ne.contentEquals("ORGANIZATION")){Organizations.add(token.toString());}
                else
                if(ne.contentEquals("PERSON")) {Persons.add(token.toString());}
                else
                if(ne.contentEquals("LOCATION")){Locations.add(token.toString());}
                else
                    continue;

            }
        }


        
        try {
            Scanner in = new Scanner(System.in);

            System.out.println("Please ask relevent Question. Ex: (how many persons?)(what are organizations?)");
            Question = in.nextLine();//reading question.

        }catch(Exception e){System.out.print("Null pointer exception while reading question.");
        }

       
        props_Q.setProperty("annotators", "tokenize, ssplit, pos, lemma, ner, parse, dcoref");


      
        Annotation document_Q = new Annotation(Question);
        StanfordCoreNLP pipeline_Q = new StanfordCoreNLP(props_Q);
        
        pipeline_Q.annotate(document_Q);


       
        List<CoreMap> sentences_Q = document_Q.get(CoreAnnotations.SentencesAnnotation.class);

        for (CoreMap sentence_Q : sentences_Q) {
            
            for (CoreLabel token_Q : sentence_Q.get(CoreAnnotations.TokensAnnotation.class)) {

                //Reading Pos
                String pos = token_Q.get(CoreAnnotations.PartOfSpeechAnnotation.class);
                System.out.println(token_Q + ":->" + pos);//printing token for testing purpose every toke is having its key at the end like "PERSON-3"
                if(pos.contentEquals("WP")) {
                    Q_part1 = pos;
                }
                else if(pos.contentEquals("WRB")){
                    Q_part1 = pos;
                }
                else if(pos.contentEquals("JJ")){
                    Q_part2 = pos;
                }
                else if(pos.contentEquals("VBZ")){
                    Q_part2 = pos;
                }
                else if(pos.contentEquals("VBP")){
                    Q_part2 = pos;
                }
                else if (pos.contentEquals("NNS")){
                    Q_part3 = pos;
                    Q_token3 = token_Q.toString();
                }
            }

//                    System.out.println(Q_part1 + Q_part2 + Q_part3);// printing the question again
            // Analyzing question and building answer
            // constructing for how many people, places and organization.
            if(Q_part1.contentEquals("WRB") && Q_part2.contentEquals("JJ")){
                if(Q_part3.contentEquals("NNS")){
                    //System.out.print(Q_token3 +"mmm__" + Q_token3.toUpperCase().contentEquals("PERSONS"));
                    if(Q_token3.toUpperCase().contentEquals("PERSONS-3")){
                        Answer = "There are "+Persons.size() + " Persons";
                    }else if(Q_token3.toUpperCase().contentEquals("PLACES-3")){
                        Answer = "There are "+Locations.size() + " Places";
                    }else if(Q_token3.toUpperCase().contentEquals("ORGANIZATIONS-3")){
                        Answer = "There are "+Organizations.size() + " Organizations";
                    }else{Answer = "Unrelevent Question, Please try with a relevent Question!!";}

                }
                else {Answer = "Unrelevent Question, Please try with a relevent Question!!";}
            }
            else if (Q_part1.contentEquals("WP") && Q_part2.contentEquals("VBP")){

                if(Q_part3.contentEquals("NNS")){
                    //System.out.print(Q_token3 +"mmm__" + Q_token3.toUpperCase().contentEquals("PERSONS"));
                    if(Q_token3.toUpperCase().contentEquals("PERSONS-3")){
                        Answer = "There are "+Persons.size() + " Persons listed \n";
                        Print_list(Persons);
                    }else if(Q_token3.toUpperCase().contentEquals("PLACES-3")){
                        Answer = "There are "+Locations.size() + " Places listed \n";
                        Print_list(Locations);
                    }else if(Q_token3.toUpperCase().contentEquals("ORGANIZATIONS-3")){
                        Answer = "There are "+Organizations.size() + " Organizations listed \n";
                        Print_list(Organizations);
                    }else{Answer = "Unrelevent Question, Please try with a relevent Question!!";}

                }
                else {Answer = "Unrelevent Question, Please try with a relevent Question!!";}

            }
            else {Answer = "Unrelevent Question, Please try with a relevent Question!!";}
        }

        System.out.println(Answer);//printting answer
    }//public static void main end

    //This function will print all of the places, persons and organizations when asked a question.
    private void Print_list(ArrayList<String> Print_list) {
        for (int i=0; i<Print_list.size(); i++){
            System.out.println( Print_list.get(i).substring(0,Print_list.get(i).indexOf('-'))+ "\n");
        }
    }
}

==========================================================
result:
=========================================================

contains - in each sentence:

true
false
true
false
true

first line in input file are::today - - Radcliffe yet to answer GB call

input text file contains:3 lines

Please ask relevent Question. Ex: (how many persons?)(what are organizations?)
how many persons?
17/06/20 21:47:15 INFO StanfordCoreNLP: Adding annotator tokenize
17/06/20 21:47:15 INFO StanfordCoreNLP: Adding annotator ssplit
17/06/20 21:47:15 INFO StanfordCoreNLP: Adding annotator pos
17/06/20 21:47:15 INFO StanfordCoreNLP: Adding annotator lemma
17/06/20 21:47:15 INFO StanfordCoreNLP: Adding annotator ner
17/06/20 21:47:15 INFO StanfordCoreNLP: Adding annotator parse
17/06/20 21:47:15 INFO StanfordCoreNLP: Adding annotator dcoref
how-1:->WRB
many-2:->JJ
persons-3:->NNS
?-4:->.
There are 13 Persons
